import { useCallback, useEffect, useRef, useState } from 'react';
import { generateAiImageQuery } from './server';
import { AiAutoGeneratedField, ALL_AI_AUTO_GENERATED_FIELDS } from '.';

export type AiContent = ReturnType<typeof useAiImageQuery>;

export default function useAiImageQuery(
  textFieldsToAutoGenerate: AiAutoGeneratedField[] = [],
  imageBase64?: string,
) {
  const [title, setTitle] = useState('');
  const [caption, setCaption] = useState('');
  const [tags, setTags] = useState('');
  const [semanticDescription, setSemanticDescription] = useState('');
  const [isLoadingTitle, setIsLoadingTitle] = useState(false);
  const [isLoadingCaption, setIsLoadingCaption] = useState(false);
  const [isLoadingTags, setIsLoadingTags] = useState(false);
  const [isLoadingSemantic, setIsLoadingSemantic] = useState(false);

  const isLoading =
    isLoadingTitle ||
    isLoadingCaption ||
    isLoadingTags ||
    isLoadingSemantic;

  const hasRunAllQueriesOnce = useRef(false);

  const request = useCallback(async (
    fields = ALL_AI_AUTO_GENERATED_FIELDS,
  ) => {
    if (process.env.NODE_ENV !== 'production') {
      console.log('RUNNING AI QUERIES', fields);
    }
    hasRunAllQueriesOnce.current = true;

    if (fields.includes('title')) setIsLoadingTitle(true);
    if (fields.includes('caption')) setIsLoadingCaption(true);
    if (fields.includes('tags')) setIsLoadingTags(true);
    if (fields.includes('semantic')) setIsLoadingSemantic(true);

    try {
      const result = await generateAiImageQuery(imageBase64);

      if (fields.includes('title')) {
        setTitle(result.title || '');
        setIsLoadingTitle(false);
      }
      if (fields.includes('caption')) {
        setCaption(result.caption || '');
        setIsLoadingCaption(false);
      }
      if (fields.includes('tags')) {
        setTags(result.tags || '');
        setIsLoadingTags(false);
      }
      if (fields.includes('semantic')) {
        setSemanticDescription(result.semanticDescription || '');
        setIsLoadingSemantic(false);
      }
    } catch (error) {
      console.error('Error in AI image query:', error);
      setIsLoadingTitle(false);
      setIsLoadingCaption(false);
      setIsLoadingTags(false);
      setIsLoadingSemantic(false);
    }
  }, [imageBase64]);

  useEffect(() => {
    if (imageBase64 && !hasRunAllQueriesOnce.current) {
      if (textFieldsToAutoGenerate.length > 0) {
        request(textFieldsToAutoGenerate);
      }
    }
  }, [textFieldsToAutoGenerate, imageBase64, request]);

  return {
    request,
    title,
    caption,
    tags,
    semanticDescription,
    isLoading,
    isLoadingTitle,
    isLoadingCaption,
    isLoadingTags,
    isLoadingSemantic,
  };
}